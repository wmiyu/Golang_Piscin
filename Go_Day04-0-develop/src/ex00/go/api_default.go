/*
 * Candy Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
    "encoding/json"
    "fmt"
    // "log"
    "net/http"
)

/*
		Cool Eskimo: 10 cents
		Apricot Aardvark: 15 cents
		Natural Tiger: 17 cents
		Dazzling 	Elderberry: 21 cents
		Yellow Rambutan: 23 cents */

const (
	CE = 10
	AA = 15
	NT = 17
	DE = 21
	YR = 23
)
/*{
    "money": 20,
    "candyType": "AA",
    "candyCount": 1
}*/

type Sell struct {
	Money 		int 	`json:"money"`
    CandyType 	string	`json:"candyType"`
    CandyCount  int		`json:"candyCount"`
}
//curl -XPOST -H "Content-Type: application/json" -d '{"money": 20, "candyType": "AA", "candyCount": 1}' http://127.0.0.1:3333/buy_candy

func BuyCandy(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	var s Sell

	err := json.NewDecoder(r.Body).Decode(&s)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if !(s.CandyType == "CE" || s.CandyType == "AA" || s.CandyType == "NT" ||
		s.CandyType == "DE" || s.CandyType == "YR") {
			w.WriteHeader(http.StatusBadRequest)
			fmt.Fprintf(w, `{"errorCode":%d,"errorMsg":"Wrong candy type"}`, 400)
			return
		}
	if s.CandyCount <= 0 {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprintf(w, `{"errorCode":%d,"errorMsg":"Wrong candy count"}`, 400)
		return
	}
	
	var code int
	var msg string
	switch s.CandyType {
		case "CE" : code, msg = checkChange(s, CE)
		case "AA" : code, msg = checkChange(s, AA)
		case "NT" : code, msg = checkChange(s, NT)
		case "DE" : code, msg = checkChange(s, DE)
		case "YR" : code, msg = checkChange(s, YR)
		}
	w.WriteHeader(code)
	fmt.Fprintf(w, msg)
	fmt.Println(s)
}

func checkChange(s Sell, price int) (int, string) {
	change := s.Money - (s.CandyCount * price)
	if change >= 0 {
		return http.StatusCreated, fmt.Sprintf(`{"change":%d,"thanks":"%s"}`, change , "Thank you!")
	} else {
		return http.StatusPaymentRequired, fmt.Sprintf(`{"errorCode":%d,"errorMsg":"You need %d more money!"}`, 402, (s.CandyCount * price) - s.Money)
	}
}
